---
title: "R Notebook"
output: html_notebook
---


```{r}
predict_period <- function(previous, current){
  previous <- coredata(previous)
  current <- coredata(current)
  
  params <- estim_params( previous[ (length(previous)/2) : length(previous)])
  #print(params)
  
  u <- params[1]
  d <- params[2]
  p <- params[3]
  q <- params[4]
  n <- length(current)

  prices <- log(current)
  log_exp <- prices[1] + log(u)*expected_maximum_sym(p, q, n)
  log_delta <- n/4 * (log(u) + log(d))
  exp_max <- log_exp + log_delta
  
  if (!is.na(exp_max)){
  if (max(prices) < exp_max){
        #print(c(prices[n], max(prices), min(prices), exp_max))
        return(c(prices[n], max(prices), min(prices), exp_max))
  }
  
  for (price in current){
      if (price >= exp_max - 0.5){
        return(c(price, max(prices), min(prices), exp_max))}}}
  else{
    return(c(NA, NA, NA, NA))}
}

```

```{r}

results_binomial <- function(splitted_data){
  chosen <- c()
  maximum <- c()
  minimum <- c()
  exp_max <- c()
  profit.difference <- c()
  c <- 1

  for (i in 1 : (length(splitted_data)-1)){
    print(i)
    res <- predict_period(splitted_data[[i]], splitted_data[[i+1]])
    print(res)
    chosen[c] <- res[1]
    maximum[c] <- res[2]
    minimum[c] <- res[3]
    exp_max[c] <- res[4]
    profit.difference[c] <- (res[1] - res[4])/res[4]
    
  
    c <- c + 1
  }


  df <- data.frame(chosen, maximum, minimum, exp_max, profit.difference)
  return(df)
}


bin.results <- results_binomial(splitted_3)
print(din.results)
```